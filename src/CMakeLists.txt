include_directories(.)
set(SOURCES
	engine.c
	dlua.c
	lua_util.c
	util.c
)
if(EMSCRIPTEN)
	list(APPEND SOURCES main_emscripten.c)
else()
	list(APPEND SOURCES main_native.c)
endif()
if(BUILD_EVENT)
	add_definitions(-DBUILD_EVENT)
	aux_source_directory(event SOURCES)
endif()
if(BUILD_PHYSICS)
	add_definitions(-DBUILD_PHYSICS)
	aux_source_directory(physics SOURCES)
endif()
if(BUILD_FONT)
	add_definitions(-DBUILD_FONT)
	aux_source_directory(truetype SOURCES)
endif()
if(BUILD_PARTICLE)
	add_definitions(-DBUILD_PARTICLE)
	aux_source_directory(particle SOURCES)
endif()
if(BUILD_AUDIO)
	add_definitions(-DBUILD_AUDIO)
	aux_source_directory(audio SOURCES)
endif()
if(BUILD_WEB)
	add_definitions(-DBUILD_WEB)
	aux_source_directory(web SOURCES)
endif()
if(BUILD_STORAGE)
	add_definitions(-DBUILD_STORAGE)
	aux_source_directory(storage SOURCES)
endif()
if(BUILD_GRAPHICS)
	add_definitions(-DBUILD_GRAPHICS)
	aux_source_directory(graphics SOURCES)
endif()
if(BUILD_UTILS)
	add_definitions(-DBUILD_UTILS)
	aux_source_directory(utils SOURCES)
endif()
if(NOT DEFINED EMSCRIPTEN AND BUILD_LIVECODING)
	add_definitions(-DBUILD_LIVECODING)
	list(APPEND SOURCES livecoding_linux.c)
endif()

include(GenerateLuaFiles)

set(DRYSTAL_OUT drystal)

set(DRYSTAL_FLAGS " ")
set(DRYSTAL_DEBUG_FLAGS " ")
set(DRYSTAL_CXX_FLAGS " ")
set(DRYSTAL_C_FLAGS " ")
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX OR CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANGC)
	if(CMAKE_BUILD_TYPE MATCHES DEBUG)
		set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -ftrapv")
	endif()
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -fvisibility=hidden")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wall")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wextra")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wundef")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wunreachable-code")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wwrite-strings")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wcast-align")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wundef")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wformat=2")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wformat-security")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wformat-nonliteral")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wpointer-arith")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wmissing-include-dirs")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wmissing-declarations")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wredundant-decls")
	set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wcast-qual")
	set(DRYSTAL_DEBUG_FLAGS "${DRYSTAL_DEBUG_FLAGS} -Werror")
	if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCC)
		set(DRYSTAL_FLAGS "${DRYSTAL_FLAGS} -Wlogical-op")
	endif()
endif()
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX)
	set(DRYSTAL_CXX_FLAGS "${DRYSTAL_CXX_FLAGS} -Weffc++")
endif()
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANGC)
	set(DRYSTAL_C_FLAGS "${DRYSTAL_C_FLAGS} -std=gnu99")
endif()

add_executable(${DRYSTAL_OUT} ${SOURCES})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${DRYSTAL_FLAGS} ${DRYSTAL_CXX_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${DRYSTAL_FLAGS} ${DRYSTAL_C_FLAGS}")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${DRYSTAL_DEBUG_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${DRYSTAL_DEBUG_FLAGS}")

if(NOT DEFINED EMSCRIPTEN)
	include(FindPkgConfig)

	if(BUILD_GRAPHICS OR BUILD_FONT OR BUILD_EVENT)
		pkg_search_module(SDL2 REQUIRED sdl2)
		include_directories(${SDL2_INCLUDE_DIRS})
		target_link_libraries(drystal ${SDL2_LIBRARIES})
	endif()

	if(BUILD_GRAPHICS OR BUILD_FONT)
		pkg_search_module(GL REQUIRED gl)
		include_directories(${GL_INCLUDE_DIRS})
		target_link_libraries(drystal ${GL_LIBRARIES})
	endif()
	if(BUILD_AUDIO)
		pkg_search_module(OPENAL REQUIRED openal)
		include_directories(${OPENAL_INCLUDE_DIRS})
		target_link_libraries(drystal ${OPENAL_LIBRARIES})
	endif()

    include(BuildCoverage)
endif()

target_link_libraries(${DRYSTAL_OUT} lua)
if(BUILD_UTILS)
	target_link_libraries(${DRYSTAL_OUT} lua-cjson)
endif()
if(BUILD_GRAPHICS)
	target_link_libraries(${DRYSTAL_OUT} stb_image)
endif()
if(BUILD_AUDIO)
	target_link_libraries(${DRYSTAL_OUT} stb_vorbis)
	target_link_libraries(${DRYSTAL_OUT} wavloader)
endif()
if(BUILD_FONT)
	target_link_libraries(${DRYSTAL_OUT} stb_truetype)
endif()
if(BUILD_PHYSICS)
	target_link_libraries(${DRYSTAL_OUT} Box2D)
endif()
if(EMSCRIPTEN)
	target_link_libraries(${DRYSTAL_OUT} miniz)
else()
	target_link_libraries(${DRYSTAL_OUT} m)
endif()
if(BUILD_LIVECODING)
	target_link_libraries(${DRYSTAL_OUT} pthread)
endif()

install(TARGETS ${DRYSTAL_OUT} DESTINATION bin)

