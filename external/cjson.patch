diff --git a/lua_cjson.c b/lua_cjson.c
index c14a1c5..e6e9109 100644
--- a/lua_cjson.c
+++ b/lua_cjson.c
@@ -187,6 +187,9 @@ static const char *char2escape[256] = {
     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
 };
 
+static json_config_t config = {
+};
+
 /* ===== CONFIGURATION ===== */
 
 static json_config_t *json_fetch_config(lua_State *l)
@@ -368,6 +371,70 @@ static int json_destroy_config(lua_State *l)
     return 0;
 }
 
+void lua_cjson_init()
+{
+    int i;
+
+    config.encode_sparse_convert = DEFAULT_SPARSE_CONVERT;
+    config.encode_sparse_ratio = DEFAULT_SPARSE_RATIO;
+    config.encode_sparse_safe = DEFAULT_SPARSE_SAFE;
+    config.encode_max_depth = DEFAULT_ENCODE_MAX_DEPTH;
+    config.decode_max_depth = DEFAULT_DECODE_MAX_DEPTH;
+    config.encode_invalid_numbers = DEFAULT_ENCODE_INVALID_NUMBERS;
+    config.decode_invalid_numbers = DEFAULT_DECODE_INVALID_NUMBERS;
+    config.encode_keep_buffer = DEFAULT_ENCODE_KEEP_BUFFER;
+    config.encode_number_precision = 6;
+
+#if DEFAULT_ENCODE_KEEP_BUFFER > 0
+    strbuf_init(&config.encode_buf, 0);
+#endif
+
+    /* Decoding init */
+
+    /* Tag all characters as an error */
+    for (i = 0; i < 256; i++)
+        config.ch2token[i] = T_ERROR;
+
+    /* Set tokens that require no further processing */
+    config.ch2token['{'] = T_OBJ_BEGIN;
+    config.ch2token['}'] = T_OBJ_END;
+    config.ch2token['['] = T_ARR_BEGIN;
+    config.ch2token[']'] = T_ARR_END;
+    config.ch2token[','] = T_COMMA;
+    config.ch2token[':'] = T_COLON;
+    config.ch2token['\0'] = T_END;
+    config.ch2token[' '] = T_WHITESPACE;
+    config.ch2token['\t'] = T_WHITESPACE;
+    config.ch2token['\n'] = T_WHITESPACE;
+    config.ch2token['\r'] = T_WHITESPACE;
+
+    /* Update characters that require further processing */
+    config.ch2token['f'] = T_UNKNOWN;     /* false? */
+    config.ch2token['i'] = T_UNKNOWN;     /* inf, ininity? */
+    config.ch2token['I'] = T_UNKNOWN;
+    config.ch2token['n'] = T_UNKNOWN;     /* null, nan? */
+    config.ch2token['N'] = T_UNKNOWN;
+    config.ch2token['t'] = T_UNKNOWN;     /* true? */
+    config.ch2token['"'] = T_UNKNOWN;     /* string? */
+    config.ch2token['+'] = T_UNKNOWN;     /* number? */
+    config.ch2token['-'] = T_UNKNOWN;
+    for (i = 0; i < 10; i++)
+        config.ch2token['0' + i] = T_UNKNOWN;
+
+    /* Lookup table for parsing escape characters */
+    for (i = 0; i < 256; i++)
+        config.escape2char[i] = 0;          /* String error */
+    config.escape2char['"'] = '"';
+    config.escape2char['\\'] = '\\';
+    config.escape2char['/'] = '/';
+    config.escape2char['b'] = '\b';
+    config.escape2char['t'] = '\t';
+    config.escape2char['n'] = '\n';
+    config.escape2char['f'] = '\f';
+    config.escape2char['r'] = '\r';
+    config.escape2char['u'] = 'u';          /* Unicode parsing required */
+}
+
 static void json_create_config(lua_State *l)
 {
     json_config_t *cfg;
@@ -706,16 +773,14 @@ static void json_append_data(lua_State *l, json_config_t *cfg,
     }
 }
 
-static int json_encode(lua_State *l)
+int json_encode(lua_State *l)
 {
-    json_config_t *cfg = json_fetch_config(l);
+    json_config_t *cfg = &config;
     strbuf_t local_encode_buf;
     strbuf_t *encode_buf;
     char *json;
     int len;
 
-    luaL_argcheck(l, lua_gettop(l) == 1, 1, "expected 1 argument");
-
     if (!cfg->encode_keep_buffer) {
         /* Use private buffer */
         encode_buf = &local_encode_buf;
@@ -1256,16 +1321,14 @@ static void json_process_value(lua_State *l, json_parse_t *json,
     }
 }
 
-static int json_decode(lua_State *l)
+int json_decode(lua_State *l)
 {
     json_parse_t json;
     json_token_t token;
     size_t json_len;
 
-    luaL_argcheck(l, lua_gettop(l) == 1, 1, "expected 1 argument");
-
-    json.cfg = json_fetch_config(l);
-    json.data = luaL_checklstring(l, 1, &json_len);
+    json.cfg = &config;
+    json.data = luaL_checklstring(l, -1, &json_len);
     json.current_depth = 0;
     json.ptr = json.data;
 
